name: Publish

on:
  push:
    tags:
      - v**
jobs:
  publish:
    name: Publish for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifactName: '^europa.*ubuntu$'
            targetName: 'europa'
            platform: 'x86_64-linux'
            appType: 'AppImage'

          - os: windows-latest
            artifactName: "^europa.*win\\.exe$"
            targetName: 'europa.exe'
            platform: 'x86_64-win'
            appType: 'exe'

          - os: macos-latest
            artifactName: '^europa.*darwin$'
            targetName: 'europa'
            platform: 'x86_64-darwin'
            appType: 'dmg'

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - run: yarn

      - name: Prepare for app notarization (macOS)
        if: startsWith(matrix.os, 'macos')
        # Import Apple API key for app notarization on macOS
        run: |
          mkdir -p ~/private_keys/
          echo '${{ secrets.api_key }}' > ~/private_keys/AuthKey_${{ secrets.api_key_id }}.p8

      - name: Download release artifact
        id: download_release_asset
        uses: i3h/download-release-asset@v1
        with:
          owner: patractlabs
          repo: europa
          tag: v0.3.6
          file: ${{ matrix.artifactName }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename & mv artifact
        run: yarn run rename

      - name: Executable artifact
        run: chmod +x resources/europa
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'mac')

      - name: echo
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'mac')
        run: ls -al ./resources

      - name: Build Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

          # macOS code signing certificate
          # mac_certs: ${{ secrets.mac_certs }}
          # mac_certs_password: ${{ secrets.mac_certs_password }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          # release: ${{ startsWith(github.ref, 'refs/tags/v') }}
        # env:
        #   # macOS notarization API key
        #   API_KEY_ID: ${{ secrets.api_key_id }}
        #   API_KEY_ISSUER_ID: ${{ secrets.api_key_issuer_id }}

      - name: Rename artifact
        run: yarn run rename:artifact

      - name: Executable Application
        run: chmod +x dist/europa
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'mac')

      - name: echo
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'mac')
        run: ls -al ./dist

      - name: Get the version for windows
        if: startsWith(matrix.os, 'win')
        id: get_version_win
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        shell: bash

      - name: Get the version for linux & macos
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'mac')
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Upload applications to release
        if: startsWith(matrix.os, 'win')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/europa
          asset_name: europa-ui-${{ steps.get_version_win.outputs.VERSION }}-${{ matrix.platform }}.${{ matrix.appType }}
          tag: ${{ steps.get_version_win.outputs.VERSION }}
          body: 'release'
          prerelease: true

      - name: Upload applications to release
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'mac')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/europa
          asset_name: europa-ui-${{ steps.get_version.outputs.VERSION }}-${{ matrix.platform }}.${{ matrix.appType }}
          tag: ${{ steps.get_version.outputs.VERSION }}
          body: 'release'
          prerelease: true
